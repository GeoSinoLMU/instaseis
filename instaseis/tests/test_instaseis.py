#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Basic integration tests for the AxiSEM database Python interface.

XXX: Right now the path to the database is hardcoded! It is too big to commit
it with the repository so something needs to be figured out. Best way is likely
to just generate a smaller database.

:copyright:
    Lion Krischer (krischer@geophysik.uni-muenchen.de), 2014
:license:
    GNU General Public License, Version 3
    (http://www.gnu.org/copyleft/gpl.html)
"""
from __future__ import absolute_import

import numpy as np

from ..instaseis import InstaSeis
from ..source import Source, Receiver


def test_fwd_vs_bwd():
    """
    Test fwd against bwd mode
    """
    instaseis_fwd = InstaSeis("data/100s_db_fwd/", reciprocal=False)
    instaseis_bwd = InstaSeis("data/100s_db_bwd/")

    source = Source(latitude=4., longitude=3.0, depth_in_m=0,
                    m_rr=4.71e+17, m_tt=3.81e+17, m_pp=-4.74e+17,
                    m_rt=3.99e+17, m_rp=-8.05e+17, m_tp=-1.23e+17)

    receiver = Receiver(latitude=10., longitude=20.)

    st_fwd = instaseis_fwd.get_seismograms(source=source, receiver=receiver,
                                           components=('Z','N','E','R','T'))
    st_bwd = instaseis_bwd.get_seismograms(source=source, receiver=receiver,
                                           components=('Z','N','E','R','T'))

    st_bwd.filter('lowpass', freq=0.002)
    st_fwd.filter('lowpass', freq=0.002)

    np.testing.assert_allclose(st_fwd.select(component="Z")[0].data,
                               st_bwd.select(component="Z")[0].data,
                               rtol=1E-3, atol=1E-10)

    np.testing.assert_allclose(st_fwd.select(component="N")[0].data,
                               st_bwd.select(component="N")[0].data,
                               rtol=1E-3, atol=1E-10)

    np.testing.assert_allclose(st_fwd.select(component="E")[0].data,
                               st_bwd.select(component="E")[0].data,
                               rtol=1E-3, atol=1E-10)

    np.testing.assert_allclose(st_fwd.select(component="R")[0].data,
                               st_bwd.select(component="R")[0].data,
                               rtol=1E-3, atol=1E-10)

    np.testing.assert_allclose(st_fwd.select(component="T")[0].data,
                               st_bwd.select(component="T")[0].data,
                               rtol=1E-3, atol=1E-10)


def test_incremental_bwd():
    """
    incremental tests of bwd mode
    """
    instaseis_bwd = InstaSeis("data/100s_db_bwd/")

    receiver = Receiver(latitude=42.6390, longitude=74.4940)
    source = Source(
        latitude=89.91, longitude=0.0, depth_in_m=12000,
        m_rr=4.710000e+24 / 1E7,
        m_tt=3.810000e+22 / 1E7,
        m_pp=-4.740000e+24 / 1E7,
        m_rt=3.990000e+23 / 1E7,
        m_rp=-8.050000e+23 / 1E7,
        m_tp=-1.230000e+24 / 1E7)

    st_bwd = instaseis_bwd.get_seismograms(source=source, receiver=receiver,
                                           components=('Z','N','E','R','T'))

    z_data = np.array([
        -3.81669935e-39, -3.35652626e-37,  3.57062429e-35,  5.06588589e-34,
         1.94696809e-32,  1.89072798e-31,  2.41251539e-28, -5.05942607e-27,
        -2.86760440e-25, -5.18421933e-24,  1.38887860e-22, -1.05029638e-21,
         9.59017864e-21, -5.51049004e-20,  3.27795998e-19,  3.66801598e-19,
        -3.62193631e-16, -4.75828883e-13, -9.34584127e-11, -3.92586924e-09,
        -3.48405306e-08, -7.17413831e-08, -4.98682132e-08, -3.48290709e-08,
        -3.06076206e-08, -5.12560088e-08, -4.93613106e-08,  9.23245204e-09,
         6.96333155e-08,  1.14468643e-07,  1.32974215e-07,  1.31444119e-07,
         1.30096351e-07,  1.25612507e-07,  1.28841749e-07,  1.62760082e-07,
         5.61877362e-08, -2.75919368e-07, -1.68349522e-07,  6.77548378e-08,
         6.12303545e-08,  5.23862687e-09, -5.59636764e-08, -6.57385329e-08,
        -1.05490967e-07, -8.09880336e-08, -4.07608006e-08, -5.50961014e-08,
        -1.82779995e-09,  3.98513859e-08,  3.83581746e-07, -3.77968643e-07,
         8.65527067e-08,  1.60996515e-06,  6.42389620e-07, -9.54976389e-07,
        -1.34522764e-06, -7.05372983e-07, -1.93699307e-08,  3.72837700e-07,
         4.26616234e-07,  3.06510952e-07,  1.16393236e-07, -1.65212277e-08,
        -9.96772346e-08, -1.14188573e-07])

    n_data = np.array([
        -5.96958190e-39,  -5.89781130e-37,   2.83102215e-35,   2.56623118e-33,
        -5.10888221e-33,  -4.16161621e-30,   1.67933008e-29,   2.04600795e-26,
        -6.59883324e-25,   5.28510811e-24,  -5.83013590e-23,   7.83984748e-22,
         1.16609069e-20,  -1.72158484e-19,   8.39366383e-19,  -6.51025720e-19,
        -2.50960666e-17,   3.46178406e-13,   7.27449661e-11,   3.09476063e-09,
         2.82341121e-08,   6.57350773e-08,   7.00736863e-08,   8.74377643e-08,
         1.15063434e-07,   1.74533015e-07,   2.13544672e-07,   1.68080983e-07,
         1.06248829e-07,   4.50717945e-08,   3.60849044e-09,   1.44347709e-08,
         6.75163602e-08,   1.42474601e-07,   1.96200936e-07,   8.96202061e-08,
        -1.75033495e-07,  -2.08592057e-07,   1.76976252e-07,   1.99391816e-07,
         1.33150566e-07,   1.00995467e-07,   1.02955473e-07,   9.80975901e-08,
         8.32742618e-08,   5.52240391e-08,  -6.04359949e-08,  -1.33982954e-07,
        -2.34621555e-08,  -1.09880012e-07,   1.17431183e-07,   1.47581535e-07,
        -5.97205640e-07,  -4.74928195e-08,   1.03865310e-06,   7.82422099e-07,
         5.02526701e-08,  -4.30853146e-07,  -4.10889299e-07,  -2.40001809e-07,
        -8.01653007e-09,   1.05567943e-07,   1.61960044e-07,   1.40885921e-07,
         9.17636544e-08,   4.84211284e-08])

    e_data = np.array([
         1.15974698e-41,   1.05877338e-39,  -5.31725007e-38,  -4.36036084e-36,
         2.84916680e-35,   7.52473224e-33,  -4.62279208e-32,  -3.77515990e-29,
         1.38842091e-27,  -1.49159509e-26,   8.99877513e-26,  -4.05121461e-25,
        -3.00692098e-23,   3.76955317e-22,  -1.74838407e-21,   6.65926876e-22,
        -3.38783935e-18,  -2.03079411e-15,  -2.80238719e-13,  -8.47140012e-12,
        -4.30027468e-11,   3.71617561e-11,   2.97648621e-10,   5.34631634e-10,
         8.21952612e-10,   1.14353949e-09,   1.66616870e-09,   2.36990685e-09,
         2.96538284e-09,   3.41398317e-09,   3.70200166e-09,   3.84298249e-09,
         3.96385800e-09,   4.16369765e-09,   4.60881372e-09,   5.54941252e-09,
         6.24290656e-09,  -4.35558007e-09,  -1.82028654e-08,  -1.33653999e-08,
        -1.07268491e-08,  -1.04735277e-08,  -1.18887443e-08,  -1.36243647e-08,
        -2.25339355e-08,  -5.58518081e-08,  -3.16411314e-08,   8.10034292e-08,
         8.76700281e-08,   1.22798799e-08,  -1.15736258e-08,  -1.42783066e-08,
        -9.21718159e-09,  -8.39552781e-09,  -6.76709284e-09,  -3.93653495e-09,
         9.29348648e-10,   6.55616912e-10,   1.66073119e-09,  -7.88372632e-10,
         7.31150846e-10,  -1.23458217e-09,   1.25831683e-11,  -9.86027370e-10,
         2.33252099e-10,  -7.74174495e-10])

    r_data = np.array([
         5.96959313e-39,   5.89782060e-37,  -2.83102710e-35,  -2.56623472e-33,
         5.10893003e-33,   4.16162289e-30,  -1.67933604e-29,  -2.04601139e-26,
         6.59884784e-25,  -5.28512762e-24,   5.83014207e-23,  -7.83983921e-22,
        -1.16609441e-20,   1.72158896e-19,  -8.39368203e-19,   6.51025711e-19,
         2.50890400e-17,  -3.46181853e-13,  -7.27453888e-11,  -3.09477151e-09,
        -2.82341408e-08,  -6.57348616e-08,  -7.00729252e-08,  -8.74364786e-08,
        -1.15061498e-07,  -1.74530292e-07,  -2.13540790e-07,  -1.68075749e-07,
        -1.06242500e-07,  -4.50646718e-08,  -3.60086273e-09,  -1.44268301e-08,
        -6.75080581e-08,  -1.42465729e-07,  -1.96191034e-07,  -8.96085935e-08,
         1.75045974e-07,   2.08582650e-07,  -1.77013345e-07,  -1.99418904e-07,
        -1.33172364e-07,  -1.01016811e-07,  -1.02979726e-07,  -9.81254262e-08,
        -8.33204684e-08,  -5.53388854e-08,   6.03707380e-08,   1.34149404e-07,
         2.36425626e-08,   1.09905055e-07,  -1.17454757e-07,  -1.47610612e-07,
         5.97185402e-07,   4.74754379e-08,  -1.03866482e-06,  -7.82428544e-07,
        -5.02506508e-08,   4.30853583e-07,   4.10891847e-07,   2.39999677e-07,
         8.01801806e-09,  -1.05570260e-07,  -1.61959675e-07,  -1.40887653e-07,
        -9.17629799e-08,  -4.84226194e-08])

    t_data = np.array([
         6.90125029e-43,   1.55212888e-40,  -5.10034208e-39,  -9.21885320e-37,
        -1.79756703e-35,   1.04140314e-33,   1.16611034e-32,  -4.36276452e-30,
        -3.01381328e-29,   4.03724505e-27,   3.00178360e-26,  -1.20860509e-24,
         6.06675951e-24,  -2.25897561e-23,   2.06591338e-23,   6.74122196e-22,
         3.43948900e-18,   1.31822876e-15,   1.30502533e-13,   2.10123947e-12,
        -1.51134137e-11,  -1.72468370e-10,  -4.41885117e-10,  -7.14609215e-10,
        -1.05879326e-09,  -1.50278948e-09,  -2.10571776e-09,  -2.71587361e-09,
        -3.18407528e-09,  -3.50675008e-09,  -3.70942140e-09,  -3.87268635e-09,
        -4.10282282e-09,  -4.45695337e-09,  -5.01265682e-09,  -5.73387174e-09,
        -5.88261075e-09,   4.78492915e-09,   1.78385454e-08,   1.29549507e-08,
         1.04527541e-08,   1.02656201e-08,   1.16767993e-08,   1.34224153e-08,
         2.23624790e-08,   5.57380186e-08,   3.17654637e-08,  -8.07274720e-08,
        -8.76215487e-08,  -1.20536809e-08,   1.13318852e-08,   1.39744999e-08,
         1.04464284e-08,   8.49326752e-09,   4.62915275e-09,   2.32601743e-09,
        -1.03278495e-09,   2.31236920e-10,  -8.14968084e-10,   1.28238196e-09,
        -7.14648363e-10,   1.01728234e-09,  -3.45955805e-10,   6.96030825e-10,
        -4.22134573e-10,   6.74504566e-10])

    np.testing.assert_allclose(st_bwd.select(component='Z')[0].data, z_data, 
                               rtol=1E-7, atol=1E-16)
    np.testing.assert_allclose(st_bwd.select(component='N')[0].data, n_data, 
                               rtol=1E-7, atol=1E-16)
    np.testing.assert_allclose(st_bwd.select(component='E')[0].data, e_data, 
                               rtol=1E-7, atol=1E-16)
    np.testing.assert_allclose(st_bwd.select(component='R')[0].data, r_data, 
                               rtol=1E-7, atol=1E-16)
    np.testing.assert_allclose(st_bwd.select(component='T')[0].data, t_data, 
                               rtol=1E-7, atol=1E-16)
